@startuml


' ********* CLASSES AND INTERFACES ********* ' 

abstract class Criteria {
    static emptyStringRepresentation: string;
    componentClass;
    stringRepresentation: string;
    value: any;
    including = true;
}


abstract class AbstractDateCriteria extends Criteria {

    static type = CriteriaType.DATE;
    static emptyStringRepresentation: string;
    componentClass = AttJobFilterDateCriteriaComponent;
    type: CriteriaType;

    abstract stringRepresentation;
    abstract value: Date;


}

abstract class AbstractHardListCriteria extends Criteria {

    static type = CriteriaType.HARD_LIST;
    static emptyStringRepresentation: string;

    componentClass = AttJobFilterOptionsCriteriaComponent;
    type: CriteriaType;

    abstract options: Array<any>;
    abstract stringRepresentation;
    abstract value;



}

abstract class AbstractApiListCriteria extends Criteria {

    static type = CriteriaType.API_LIST;
    static emptyStringRepresentation: string;
    static _mapFunction: (values: Array<any>) => (Array<{displayValue: string, data: any}>);

    componentClass = AttJobFilterApiOptionsCriteriaComponent;
    type: CriteriaType;


    abstract url: string;
    abstract stringRepresentation;
    abstract value;

    abstract get mapFunction()


}

abstract class AbstractPeriodCriteria extends Criteria {

    static type = CriteriaType.PERIOD;
    static emptyStringRepresentation: string;
    componentClass = AttJobFilterPeriodCriteriaComponent;
    type: CriteriaType;

    abstract stringRepresentation;
    abstract value: {from: Date, to: Date};

}

class FunctionCriteria extends AbstractHardListCriteria {

    get stringRepresentation(): string 

    static readonly emptyStringRepresentation = 'Select a function:';

    options = [
        'Software Engineer', 'Test Engineer', 'Functional Analyst'
    ];
    value: string;
}

class ValidOnCriteria extends AbstractDateCriteria {

    static readonly emptyStringRepresentation = 'Valid on';

    get stringRepresentation(): string 

    value: Date;

    type = CriteriaType.DATE;
}

class UnitCriteria extends AbstractHardListCriteria {


    static readonly emptyStringRepresentation = 'Select a unit';

    get stringRepresentation(): string 


    options = [
        'UNIT 1',
        'An other unit ',
        'the best unit ',
        'no body want to be in this unit ',
    ];

    value: string;

}

class StatusCriteria extends AbstractHardListCriteria {

    static readonly emptyStringRepresentation = 'Select a status';

    get stringRepresentation(): string


    options = [
        'In Service', 'Out of service'
    ];

    value: string;
}

class DepartmentCriteria extends AbstractApiListCriteria {

    get stringRepresentation(): string 

    static readonly emptyStringRepresentation = 'Select a department';

    value: string;
    url: string;

    static _mapFunction = (values: Array<string>) => (values.map(value => ({displayValue: value, data: value})));

    get mapFunction() 

}


class InserviceCriteria extends AbstractPeriodCriteria {

    static readonly emptyStringRepresentation  = 'In service from - to ';

    get stringRepresentation(): string 

    value: {from: Date, to: Date};
}






' ********* COMPONENTS ********* ' 


 abstract class AbstactCriteriaComponent<T extends Criteria> {
  .. @Input ..
  abstract criteria: T 
  .. @Output ..
  abstract criteriaUpdated: EventEmitter<T>
  abstract criteriaUpdateFinished: EventEmitter<T>

}

class AttJobFilterPeriodCriteriaComponent implements AbstactCriteriaComponent {
    
}

class AttJobFilterOptionsCriteriaComponent implements AbstactCriteriaComponent {
    
}


class AttJobFilterDateCriteriaComponent implements AbstactCriteriaComponent {
    
}

class AttJobFilterApiOptionsCriteriaComponent implements AbstactCriteriaComponent {
    
}


' ********* RELATIONS ********* ' 

@enduml